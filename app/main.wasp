app myProject {
  wasp: {
    version: "^0.12.2"
  },
  title: "CA Assist",
  client: {
    rootComponent: import App from "@src/client/App",
  },
  auth: {
    userEntity: User,
    methods: {
      // usernameAndPassword: {
      //   userSignupFields: import {usernamePasswordSignupFields} from "@src/server/auth/setUsername"
      // },
      email: {
        userSignupFields: import {emailPasswordSignupFields} from "@src/server/auth/setUsername",
        fromField: {
          name: "CA Assist",
          email: "ca_assist@test.com",
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@src/server/auth/email",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@src/server/auth/email",
        }
      },
      google: { 
        configFn: import { getGoogleAuthConfig } from "@src/server/auth/setUsername.js",
        userSignupFields: import { getGoogleUserFields } from "@src/server/auth/setUsername.js",
      },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/chat",
  },
  db: {
    system: PostgreSQL,
    seeds: [
      import {devSeedUsers} from "@src/server/scripts/usersSeed"
    ]
  },
  emailSender: {
    provider: Dummy
  }
}

entity User {=psl
  id                        Int             @id @default(autoincrement())
  panNumber                 String?         @unique
  completeAccount           Boolean         @default(false)
  firstName                 String?
  lastName                  String?
  primaryLang               String?
  secondaryLang             String?
  email                     String?         @unique
  username                  String?         @unique
  createdAt                 DateTime        @default(now())
  lastActiveTimestamp       DateTime        @default(now())
  credits                   Int             @default(2)
  hasPaid                   Boolean         @default(false)
  subscriptionStatus        Boolean         @default(false)   
  phoneNumber               String?         
  logins                    UserLogin[]  
  // currentConv               String?
  // isAdmin                   Boolean         @default(false)
  // stripeId                  String? 
  // checkoutSessionId         String?
  // subscriptionTier          String?
  // sendEmail                 Boolean         @default(false)
  // datePaid                  DateTime?
psl=}

entity UserLogin {=psl  
  id                        Int             @id @default(autoincrement())
  user                      User            @relation(fields: [userId], references: [id])
  userId                    Int             // Foreign key to User
  ip                        String
  country                   String
  regionName                String
  city                      String
  createdAt                 DateTime        @default(now())
psl=}


route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import {LandingPage} from "@src/client/landing-page/LandingPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import {LoginPage} from "@src/client/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import {SignupPage} from "@src/client/auth/SignupPage"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordReset } from "@src/client/auth/RequestPasswordReset",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordReset } from "@src/client/auth/PasswordReset",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerification } from "@src/client/auth/EmailVerification",
}

route UserInfoRoute {path: "/dashboard", to: UserInfoPage}
page UserInfoPage {
  authRequired: true,
  component: import {UserInfoPage} from "@src/client/app/UserInfoPage"
}

route ChatRoute {path: "/chat", to: ChatPage}
page ChatPage {
  authRequired: true,
  component: import {ChatPage} from "@src/client/app/ChatPage"
}
route PurchaseRoute {path: "/purchase", to: PurchasePage}
page PurchasePage {
  authRequired: true,
  component: import {PurchasePage} from "@src/client/app/PurchasePage"
}

action updateCurrentUser {
  fn: import { updateCurrentUser } from "@src/server/actions",
  entities: [User]
}

action updateCredit {
  fn: import {updateCredit} from "@src/server/actions",
  entities: [User]
}

action updateUserInfo {
  fn: import {updateUserInfo} from "@src/server/actions",
  entities: [User]
}

action updateSubscriberStatus {
  fn: import {updateSubscriberStatus} from "@src/server/actions",
  entities: [User]
}